import plotly.offline as pyo
import plotly.graph_objs as go
import csv
import networkx as nx
import numpy as np
import pandas as pd
import numpy as np
from plotly.subplots import make_subplots
import gc

# Identifies the simulations under analysis
scenario_a = ['N400h100T0.8U0.6UM0.4M0gap0.02', 'A']
scenario_b = ['N100h100T0.8U0.6UM0.4M0gap0.02', 'B']
scenario_c = ['N400h100T0.8U0.6UM0.4M0gap0.2', 'C']
scenario_d = ['N400h1000T0.8U0.6UM0.4M0gap0.02', 'D']
scenario_e = ['N400h100T0.5U0.3UM0.2M0gap0.02', 'E']
scenario_f = ['N400h100T0.8U0.6UM0.4M0gap0.01', 'F']

# 3D Network
def net_graph(k, s, g, tag):

    dfp = pd.read_parquet(
                            '{}//players_sim{}_gen{}.parquet'.format(tag, s, g),
                            engine = 'fastparquet',

                            )

    #dfp = dfp[dfp.Income_class == 'Top10']

    dfp['Pos'] = list(zip(dfp.Resources, dfp.Intrinsic, dfp.Income))

    dftemp = dfp[['Player', 'Income']]

    dfi = pd.read_parquet(
                            '{}//interactions_sim{}_gen{}.parquet'.format(tag, s, g),
                            engine = 'fastparquet',
                            columns = [
                                        'Player_A',
                                        'Player_B',
                                        'Resources_A',
                                        'Resources_B',
                                        'Intrinsic_A',
                                        'Intrinsic_B',
                                        'Link_strenght_A',
                                        'Link_strenght_B',
                                        ]

                            )

    dfi = pd.merge(
            dftemp,
            dfi,
            left_on = ['Player'],
            right_on = ['Player_A'],
            how = 'left'
            )

    dfi = dfi.drop(columns = ['Player'])
    dfi = dfi.rename(columns = {'Income': 'Income_A'})
    dfi = pd.merge(
            dftemp,
            dfi,
            left_on = ['Player'],
            right_on = ['Player_B'],
            how = 'left'
            )
    dfi = dfi.drop(columns = ['Player'])
    dfi = dfi.rename(columns = {'Income': 'Income_B'})
    dfi = dfi.dropna()

    dfi['Edge_Player'] = list(zip(dfi.Player_A, dfi.Player_B))
    dfi['Edge_Resources'] = list((zip(dfi.Resources_A, dfi.Resources_B)))
    dfi['Edge_Intrinsic'] = list((zip(dfi.Intrinsic_A, dfi.Intrinsic_B)))
    dfi['Edge_Income'] = list((zip(dfi.Income_A, dfi.Income_B)))

    nodes = dfp.Player.tolist()
    edges = dfi.Edge_Player.tolist()

    pos = pd.Series(
                    dfp.Pos.values,
                    index = dfp.Player).to_dict()
    edge_resources = []
    for i in dfi.Edge_Resources.values:
        edge_resources.append(i[0])
        edge_resources.append(i[1])
        edge_resources.append(None)

    edge_intrinsic = []
    for i in dfi.Edge_Intrinsic.values:
        edge_intrinsic.append(i[0])
        edge_intrinsic.append(i[1])
        edge_intrinsic.append(None)

    edge_income = []
    for i in dfi.Edge_Income.values:
        edge_income.append(i[0])
        edge_income.append(i[1])
        edge_income.append(None)

    edge_trace = go.Scatter3d(
                                x = edge_resources,
                                y = edge_intrinsic,
                                z = edge_income,
                                line = dict(
                                            width = 0.5,
                                            showscale = True,
                                            # colorscale options
                                            #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
                                            #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
                                            #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
                                            color = dfi.Link_strenght_A.values.tolist(),
                                            colorscale = 'Portland',
                                            colorbar = dict(
                                                            thicknessmode="pixels",
                                                            thickness = 15,
                                                            tickfont = dict(
                                                                            family = 'Times New Roman',
                                                                            size = 12,
                                                                            color = 'black'
                                                                            ),
                                                            tickcolor = 'black',
                                                            title = 'Link Strength',
                                                            xanchor = 'right',
                                                            titleside = 'top',
                                                            titlefont = dict(
                                                                            family = 'Times New Roman',
                                                                            size = 14,
                                                                            color = 'black'
                                                                            ),
                                                            )
                                            ),
                                hoverinfo = 'none',
                                mode = 'lines',
                                )

    node_trace = go.Scatter3d(
                            x=[],
                            y=[],
                            z=[],
                            text=[],
                            mode='markers',
                            #hoverinfo='text',
                            hovertemplate = '<br>Wealth: <i>%{x:.2f}'
                                            '<br>Intrinsic: <i>%{y:.2f}'
                                            '<br>Income: <i>%{z:.2f}'
                                            '<br><b>%{text}</b>',
                            marker=dict(
                                        showscale = True,
                                        # colorscale options
                                        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
                                        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
                                        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
                                        colorscale = 'Jet',
                                        reversescale = True,
                                        color = [],
                                        size = 5,
                                        colorbar = dict(
                                                            thicknessmode="pixels",
                                                            thickness = 15,
                                                            tickfont = dict(
                                                                            family = 'Times New Roman',
                                                                            size = 12,
                                                                            color = 'black'
                                                                            ),
                                                            tickcolor = 'black',
                                                            title = 'Income',
                                                            xanchor = 'left',
                                                            titleside = 'top',
                                                            titlefont = dict(
                                                                            family = 'Times New Roman',
                                                                            size = 14,
                                                                            color = 'black'
                                                                            ),
                                                        ),
                                line = dict(
                                            width = 0.4,
                                            color = 'snow'
                                            )
                                        )
                                )

    for node in nodes:
        x, y, z = pos[node][0], pos[node][1], pos[node][2]
        node_trace['x'] += tuple([x])
        node_trace['y'] += tuple([y])
        node_trace['z'] += tuple([z])
        node_trace['text'] += tuple([node])
        node_trace['marker']['color'] += tuple([z])

    axis=dict(
                showbackground=False,
                showline=False,
                zeroline=False,
                showgrid=False,
                showticklabels=False,
                title=''
              )

    layout = go.Layout(
                        #title='<br><b>Figure {}: Generation {} (Scenario C)<br><b>'.format(k, g + 1),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 0,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),
                        scene=dict(
                                     xaxis=dict(
                                                title = 'Resources',
                                                titlefont = dict(
                                                                family = 'Times New Roman',
                                                                size = 14,
                                                                color = 'black'),
                                                tickfont = dict(
                                                                family = 'Times New Roman',
                                                                size = 14,
                                                                color = 'black'),
                                                backgroundcolor = 'rgba(0,0,0,0)',
                                                showgrid = True,
                                                zeroline = True,
                                                showline = True,
                                                color = 'lightgray',
                                                linecolor = 'lightgray',
                                                gridcolor = 'lightgray',
                                                showticklabels = True
                                                ),
                                     yaxis=dict(
                                                title = 'Intrinsic',
                                                titlefont = dict(
                                                                family = 'Times New Roman',
                                                                size = 14,
                                                                color = 'black'),
                                                tickfont = dict(
                                                                family = 'Times New Roman',
                                                                size = 14,
                                                                color = 'black'),
                                                backgroundcolor = 'rgba(0,0,0,0)',
                                                showgrid = True,
                                                zeroline = True,
                                                showline = True,
                                                color = 'lightgray',
                                                linecolor = 'lightgray',
                                                gridcolor = 'lightgray',
                                                showticklabels = True
                                                ),

                                     zaxis=dict(
                                                title = 'Income',
                                                titlefont = dict(
                                                                family = 'Times New Roman',
                                                                size = 14,
                                                                color = 'black'),
                                                tickfont = dict(
                                                                family = 'Times New Roman',
                                                                size = 14,
                                                                color = 'black'),
                                                backgroundcolor = 'rgba(0,0,0,0)',
                                                showgrid = True,
                                                zeroline = True,
                                                showline = True,
                                                color = 'lightgray',
                                                linecolor = 'lightgray',
                                                gridcolor = 'lightgray',
                                                showticklabels = True
                                                )
                                    )
                                    )

    fig = go.Figure(
                    data=[node_trace, edge_trace],
                    layout = layout
                    )

    pyo.plot(
            fig,
            filename='Figure{}_sim{}_gen{}_{}.html'.format(k, s, g, tag)
            )

net_graph(8, 0, 107, 'N400h100T0.8U0.6UM0.4M0gap0.02')

def income_share_brackets(k, s, z):

    title_p = 'Income Share'
    title_x = 'Generation'
    title_y = 'Income Share'

    df = pd.read_parquet(
                        '{}//society_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    'Income_Top20',
                                    'Income_Top50',
                                    'Income_Bottom30',
                                    'Income_Bottom',
                                    ]
                        )

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    trace1 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Top01.values / df.Income.values,
                        mode = 'lines',
                        name = '99th',
                        line = dict(
                                        color = 'purple',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Top10.values / df.Income.values,
                        mode = 'lines',
                        name = '90th - 98th',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Top20.values / df.Income.values,
                        mode = 'lines',
                        name = '80th - 89th',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Top50.values / df.Income.values,
                        mode = 'lines',
                        name = '50th - 79th',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace5 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Bottom30.values / df.Income.values,
                        mode = 'lines',
                        name = '20th - 49th',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace6 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Bottom.values / df.Income.values,
                        mode = 'lines',
                        name = '19th',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            trace6
            ]

    layout = go.Layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'
                                        ),
                        showlegend = True,
                        legend = dict(
                                        font = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'
                                            )
                                        ),
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    title = '{}'.format(title_x),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = True,
                                    showgrid = True,
                                    zeroline = False,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    gridcolor = 'lightgray',

                                    ),

                        yaxis = dict(
                                    title = '{}'.format(title_y),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    showticklabels = True
                                    )

                        )
    fig = go.Figure(
                    data = data,
                    layout = layout
                    )

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_{}.html'.format(k, title_p, z[0])
            )
    del df
    gc.collect()

income_share_brackets(2, 0, scenario_a)

def gini_brackets(k, s, z):

    title_p = 'Gini Index'
    title_x = 'Generation'
    title_y = 'Gini Index'

    df = pd.read_parquet(
                        '{}//society_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini_Top01',
                                    'Gini_Top10',
                                    'Gini_Top20',
                                    'Gini_Top50',
                                    'Gini_Bottom30',
                                    'Gini_Bottom',
                                    'Gini'
                                    ]
                        )
    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    trace0 = go.Scatter(
                        x = df[df.Simulation.values == 0].Generation.values,
                        y = df[df.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'System',
                        line = dict(
                                        color = 'maroon',
                                        width = 3,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace1 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Gini_Top01.values,
                        mode = 'lines',
                        name = '99th',
                        line = dict(
                                        color = 'purple',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Gini_Top10.values,
                        mode = 'lines',
                        name = '90th - 98th',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Gini_Top20.values,
                        mode = 'lines',
                        name = '80th - 89th',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Gini_Top50.values,
                        mode = 'lines',
                        name = '50th - 79th',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace5 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Gini_Bottom30.values,
                        mode = 'lines',
                        name = '20th - 49th',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace6 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Gini_Bottom.values,
                        mode = 'lines',
                        name = '19th',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace0,
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            trace6
            ]

    layout = go.Layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = True,
                        legend = dict(
                                        font = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'
                                            )
                                        ),
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    title = '{}'.format(title_x),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = True,
                                    showgrid = True,
                                    zeroline = False,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    gridcolor = 'lightgray',

                                    ),

                        yaxis = dict(
                                    title = '{}'.format(title_y),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    showticklabels = True
                                    )

                        )
    fig = go.Figure(
                    data = data,
                    layout = layout
                    )

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_{}.html'.format(k, title_p, z[0])
            )

gini_brackets(3, 0, scenario_a)

def source_heat_brackets(k, s, z):

    title_p = 'Sources of Income'
    title_x = 'Generation'
    title_y = 'Sources'

    temptation = 0.021
    defection = 0.001

    pd.set_option('display.float_format', lambda x: "{:,.4f}".format(x))

    df = pd.read_parquet(
                            '{}//report_{}.parquet'.format(z[0], z[0]),
                            engine = 'fastparquet',
                            columns = [
                                        'Simulation',
                                        'Generation',
                                        'Player',
                                        'Income_class',
                                        'Income_class_Counterpart',
                                        'Partial_Income',
                                        'Connections',
                                        'Cooperation',
                                        'Temptation',
                                        'Defection',
                                        'Link_weighted',
                                        'Resources',
                                        'Intrinsic',
                                        'Income',
                                        ]
                            ).sort_values(
                                           by = [
                                                   'Player',
                                                   'Generation',
                                                   'Income_class'
                                                   ],
                                                   ascending = True
                                                   )#.groupby(['Simulation','Generation','Income_class']).sum().reset_index()

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    dfA = df[['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Partial_Income', 'Resources', 'Temptation']]
    dfA['Income_Source'] = (dfA.Resources.values * temptation * dfA.Temptation.values) #/ dfA.Income.values
    dfA['Source'] = ['Assets-Temptation (w*T)'] * len(dfA.index)
    dfB = df[['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Partial_Income', 'Resources', 'Cooperation']]
    dfB['Income_Source'] = (dfB.Resources.values * ((temptation + defection) / 2) * dfB.Cooperation.values) #/ dfB.Income.values
    dfB['Source'] = ['Assets-Cooperation (w*R)'] * len(dfB.index)
    dfC = df[['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Partial_Income', 'Resources', 'Defection']]
    dfC['Income_Source'] = (dfC.Resources.values * defection * dfC.Defection.values) #/ dfC.Income.values
    dfC['Source'] = ['Assets-Competition (w*P)'] * len(dfC.index)
    dfD = df[['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Partial_Income', 'Intrinsic', 'Temptation']]
    dfD['Income_Source'] = (dfD.Intrinsic.values * temptation * dfD.Temptation.values) #/ dfD.Income.values
    dfD['Source'] = ['Intrinsic-Temptation (h*T)'] * len(dfD.index)
    dfE = df[['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Partial_Income', 'Intrinsic', 'Cooperation']]
    dfE['Income_Source'] = (dfE.Intrinsic.values * ((temptation + defection) / 2) * dfE.Cooperation.values) #/ dfE.Income.values
    dfE['Source'] = ['Intrinsic-Cooperation (h*R)'] * len(dfE.index)
    dfF = df[['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Partial_Income', 'Intrinsic', 'Defection']]
    dfF['Income_Source'] = (dfF.Intrinsic.values * defection * dfF.Defection.values) #/ dfF.Income.values
    dfF['Source'] = ['Intrinsic-Competition (h*P)'] * len(dfF.index)

    df = pd.concat([dfA, dfB, dfC, dfD, dfE, dfF]).fillna(0)

    del dfA, dfB, dfC, dfD, dfE, dfF
    gc.collect()

    df = df[
            [
            'Simulation',
            'Generation',
            'Player',
            'Income_class',
            'Income_class_Counterpart',
            'Source',
            'Income_Source',
            'Cooperation',
            'Defection',
            'Temptation',
            'Partial_Income',
            ]
            ]
    df = df.groupby(['Simulation','Generation','Income_class', 'Source']).sum().reset_index()

    df_temp = pd.read_parquet(
                                '{}//report_{}.parquet'.format(z[0], z[0]),
                                engine = 'fastparquet',
                                columns = [
                                            'Simulation',
                                            'Generation',
                                            'Player',
                                            'Income_class',
                                            'Income_class_Counterpart',
                                            'Resources',
                                            'Intrinsic',
                                            'Income',
                                            ]
                                ).groupby(['Simulation','Generation','Player','Income_class']).mean().reset_index()
    df_temp['Generation'] = df_temp.Generation.values + np.ones(len(df_temp.index))
    df_temp = df_temp.groupby(['Simulation','Generation','Income_class']).sum().reset_index()
    df = df.merge(
                    df_temp,
                    on = [
                            'Simulation',
                            'Generation',
                            'Income_class',
                            ],
                             how = 'outer',
                             ).sort_values(
                                            by = [
                                                    'Simulation',
                                                    'Generation',
                                                    'Income_class',
                                                    ],
                                                    ascending = True
                                                    )
    del df_temp
    gc.collect()

    df['Source_Share'] = df.Income_Source.values / df.Income.values

    df = df.replace({pd.np.nan: None,
                     0: None})

    df1 = df[df.Income_class.values == 'Top01']
    df2 = df[df.Income_class.values == 'Top10']
    df3 = df[df.Income_class.values == 'Top20']
    df4 = df[df.Income_class.values == 'Top50']
    df5 = df[df.Income_class.values == 'Bottom30']
    df6 = df[df.Income_class.values == 'Bottom']

    # colorscale options
    #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
    #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
    #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
    trace1 = go.Heatmap(
                        z = df1['Source_Share'],
                        x = df1['Generation'],
                        y = df1['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness = 15,
                                        tickfont = dict(
                                                        family = 'Times New Roman',
                                                        size = 12,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),

                        )

    trace2 = go.Heatmap(
                        z = df2['Source_Share'],
                        x = df2['Generation'],
                        y = df2['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,

                        )

    trace3 = go.Heatmap(
                        z = df3['Source_Share'],
                        x = df3['Generation'],
                        y = df3['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                            showscale = False,

                        )

    trace4 = go.Heatmap(
                        z = df4['Source_Share'],
                        x = df4['Generation'],
                        y = df4['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness = 15,
                                        tickfont = dict(
                                                        family = 'Times New Roman',
                                                        size = 12,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),

                        )

    trace5 = go.Heatmap(
                        z = df5['Source_Share'],
                        x = df5['Generation'],
                        y = df5['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,

                        )

    trace6 = go.Heatmap(
                        z = df6['Source_Share'],
                        x = df6['Generation'],
                        y = df6['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,
                        )

    fig1 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['99th', '90th - 98th', '80th - 89th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig1.add_trace(trace1, row = 1, col = 1)
    fig1.add_trace(trace2, row = 2, col = 1)
    fig1.add_trace(trace3, row = 3, col = 1)

    fig1.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig1['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig1,
            filename = 'Figure{}_{}_{} - UpperBrackets.html'.format(k, title_p, z[0])
            )

    fig2 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['50th - 79th', '20th - 49th', '19th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig2.add_trace(trace4, row = 1, col = 1)
    fig2.add_trace(trace5, row = 2, col = 1)
    fig2.add_trace(trace6, row = 3, col = 1)

    fig2.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig2['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig2,
            filename = 'Figure{}_{}_{} - LowerBrackets.html'.format(k + 1, title_p, z[0])
            )

source_heat_brackets(9, 0, scenario_a)

def mobility_heat_brackets(k, s, z):

    title_p = 'Mobility'
    title_x = 'Generation'
    title_y = 'Share of Changes'

    df = pd.read_parquet(
                        '{}//report_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Simulation',
                                    'Generation',
                                    'Player',
                                    'Income_class',
                                    'Income_class_Counterpart',
                                    ]
                        )

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    players = int(z[0][1:4]) - 1

    df['Agregate'] = df.Income_class.values

    df['key_Previous_Income_class'] = df.Generation.values - np.ones(len(df.index))
    df['key_Previous_Income_class'] = df['key_Previous_Income_class'].map(str) + df.Player.values
    df_temp = df[['Generation', 'Player', 'Income_class']]
    df_temp = df_temp.rename(columns = {'Income_class': 'Previous_Income_class'})
    df_temp['key_Previous_Income_class'] = df['Generation'].map(str) + df.Player.values
    df_temp = df_temp.drop(['Generation', 'Player'], axis = 1)
    df = df.merge(df_temp, on = 'key_Previous_Income_class', how = 'left')
    #df['Moved'] = (df.Previous_Income_class.values != df.Income_class.values).astype('int')
    del df_temp
    df = df.drop(['key_Previous_Income_class'], axis = 1)

    df['Players_Number'] = np.ones(len(df.index))
    df = df.groupby(['Simulation', 'Generation', 'Player', 'Income_class', 'Previous_Income_class']).mean().reset_index()
    df = df[['Simulation', 'Generation', 'Player', 'Income_class', 'Previous_Income_class']]

    df1 = df.groupby(['Simulation', 'Generation', 'Income_class', 'Previous_Income_class']).count().reset_index()
    df2 = df.groupby(['Simulation', 'Generation', 'Income_class',]).count().reset_index()
    df2 = df2.drop(columns = ['Previous_Income_class'])
    df2 = df2.rename(columns = {'Player': 'Total_Players'})

    df = df1.merge(df2, on = ['Simulation', 'Generation', 'Income_class'])
    df['Players_Percentage'] = df.Player.values / df.Total_Players.values
    df = df[['Generation', 'Income_class', 'Previous_Income_class', 'Players_Percentage']]

    df.Previous_Income_class.replace(
                                    {
                                    'Top01': '99th',
                                     'Top10': '90th - 98th',
                                     'Top20': '80th - 89th',
                                     'Top50': '50th - 79th',
                                     'Bottom30': '20th - 49th',
                                     'Bottom': '19th',
                                     },
                                    inplace = True
                                    )
    df = df.replace({pd.np.nan: None,
                     0: None})
    df = df.sort_values(by=['Previous_Income_class'], ascending = False)

    df1 = df[df.Income_class.values == 'Top01']
    df2 = df[df.Income_class.values == 'Top10']
    df3 = df[df.Income_class.values == 'Top20']
    df4 = df[df.Income_class.values == 'Top50']
    df5 = df[df.Income_class.values == 'Bottom30']
    df6 = df[df.Income_class.values == 'Bottom']


    # colorscale options
    #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
    #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
    #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
    trace1 = go.Heatmap(
                        z = df1['Players_Percentage'],
                        x = df1['Generation'],
                        y = df1['Previous_Income_class'],
                        #colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness = 15,
                                        tickfont = dict(
                                                        family = 'Times New Roman',
                                                        size = 12,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),

                        )

    trace2 = go.Heatmap(
                        z = df2['Players_Percentage'],
                        x = df2['Generation'],
                        y = df2['Previous_Income_class'],
                        #colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,

                        )

    trace3 = go.Heatmap(
                        z = df3['Players_Percentage'],
                        x = df3['Generation'],
                        y = df3['Previous_Income_class'],
                        #colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,

                        )

    trace4 = go.Heatmap(
                        z = df4['Players_Percentage'],
                        x = df4['Generation'],
                        y = df4['Previous_Income_class'],
                        #colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness = 15,
                                        tickfont = dict(
                                                        family = 'Times New Roman',
                                                        size = 12,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),

                        )

    trace5 = go.Heatmap(
                        z = df5['Players_Percentage'],
                        x = df5['Generation'],
                        y = df5['Previous_Income_class'],
                        #colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,

                        )

    trace6 = go.Heatmap(
                        z = df6['Players_Percentage'],
                        x = df6['Generation'],
                        y = df6['Previous_Income_class'],
                        #colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,
                        )

    fig1 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['99th', '90th - 98th', '80th - 89th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig1.add_trace(trace1, row = 1, col = 1)
    fig1.add_trace(trace2, row = 2, col = 1)
    fig1.add_trace(trace3, row = 3, col = 1)

    fig1.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig1['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig1,
            filename = 'Figure{}_{}_{} - UpperBrackets.html'.format(k, title_p, z[0])
            )

    fig2 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['50th - 79th', '20th - 49th', '19th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig2.add_trace(trace4, row = 1, col = 1)
    fig2.add_trace(trace5, row = 2, col = 1)
    fig2.add_trace(trace6, row = 3, col = 1)

    fig2.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig2['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig2,
            filename = 'Figure{}_{}_{} - LowerBrackets.html'.format(k + 1, title_p, z[0])
            )

mobility_heat_brackets(11, 0, scenario_a)

def source_moved_heat_brackets(k, s, z):

    title_p = 'Sources of Income: New Members'
    title_x = 'Generation'
    title_y = 'Sources'

    pd.set_option('display.float_format', lambda x: "{:,.4f}".format(x))

    df = pd.read_parquet(
                            '{}//report_{}.parquet'.format(z[0], z[0]),
                            engine = 'fastparquet',
                            columns = [
                                        'Simulation',
                                        'Generation',
                                        'Player',
                                        'Income_class',
                                        'Income_class_Counterpart',
                                        'Partial_Income',
                                        'Connections',
                                        'Cooperation',
                                        'Temptation',
                                        'Defection',
                                        'Link_weighted',
                                        'Resources',
                                        'Intrinsic',
                                        'Income',
                                        ]
                            ).sort_values(
                                           by = [
                                                   'Player',
                                                   'Generation',
                                                   'Income_class'
                                                   ],
                                                   ascending = True
                                                   )#.groupby(['Simulation','Generation','Income_class']).sum().reset_index()

    df = df[df.Simulation.values == s]
    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    df['key_Previous_Income_class'] = df.Generation.values - np.ones(len(df.index))
    df['key_Previous_Income_class'] = df['key_Previous_Income_class'].map(str) + df.Player.values
    df_temp = df[['Generation', 'Player', 'Income_class']]
    df_temp = df_temp.rename(columns = {'Income_class': 'Previous_Income_class'})
    df_temp['key_Previous_Income_class'] = df['Generation'].map(str) + df.Player.values
    df_temp = df_temp.drop(['Generation', 'Player'], axis = 1)
    df = df.merge(df_temp, on = 'key_Previous_Income_class', how = 'left')
    df['Moved'] = (df.Previous_Income_class.values != df.Income_class.values).astype('int')
    del df_temp
    gc.collect()
    df = df.drop(['key_Previous_Income_class'], axis = 1)
    df = df[(df.Moved.values == 1)]
    df = df.groupby(['Simulation','Generation','Player','Income_class', 'Income_class_Counterpart', 'Previous_Income_class', 'Moved']).mean().reset_index()

    dfA = df[['Simulation','Generation','Player','Income_class', 'Previous_Income_class', 'Moved', 'Income_class_Counterpart', 'Partial_Income', 'Resources', 'Temptation']]
    dfA['Income_Source'] = (dfA.Resources.values * 0.021 * dfA.Temptation.values) #/ dfA.Income.values
    dfA['Source'] = ['Resources - Temptation'] * len(dfA.index)
    dfB = df[['Simulation','Generation','Player','Income_class', 'Previous_Income_class', 'Moved', 'Income_class_Counterpart', 'Partial_Income', 'Resources', 'Cooperation']]
    dfB['Income_Source'] = (dfB.Resources.values * ((0.021 + 0.001) / 2) * dfB.Cooperation.values) #/ dfB.Income.values
    dfB['Source'] = ['Resources - Cooperation'] * len(dfB.index)
    dfC = df[['Simulation','Generation','Player','Income_class', 'Previous_Income_class', 'Moved', 'Income_class_Counterpart', 'Partial_Income', 'Resources', 'Defection']]
    dfC['Income_Source'] = (dfC.Resources.values * 0.001 * dfC.Defection.values) #/ dfC.Income.values
    dfC['Source'] = ['Resources - Competition'] * len(dfC.index)
    dfD = df[['Simulation','Generation','Player','Income_class', 'Previous_Income_class', 'Moved', 'Income_class_Counterpart', 'Partial_Income', 'Intrinsic', 'Temptation']]
    dfD['Income_Source'] = (dfD.Intrinsic.values * 0.021 * dfD.Temptation.values) #/ dfD.Income.values
    dfD['Source'] = ['Intrinsic - Temptation'] * len(dfD.index)
    dfE = df[['Simulation','Generation','Player','Income_class', 'Previous_Income_class', 'Moved', 'Income_class_Counterpart', 'Partial_Income', 'Intrinsic', 'Cooperation']]
    dfE['Income_Source'] = (dfE.Intrinsic.values * ((0.021 + 0.001) / 2) * dfE.Cooperation.values) #/ dfE.Income.values
    dfE['Source'] = ['Intrinsic - Cooperation'] * len(dfE.index)
    dfF = df[['Simulation','Generation','Player','Income_class', 'Previous_Income_class', 'Moved', 'Income_class_Counterpart', 'Partial_Income', 'Intrinsic', 'Defection']]
    dfF['Income_Source'] = (dfF.Intrinsic.values * 0.001 * dfF.Defection.values) #/ dfF.Income.values
    dfF['Source'] = ['Intrinsic - Competition'] * len(dfF.index)

    df = pd.concat([dfA, dfB, dfC, dfD, dfE, dfF]).fillna(0)

    del dfA, dfB, dfC, dfD, dfE, dfF
    gc.collect()

    df = df[
            [
            'Simulation',
            'Generation',
            'Player',
            'Income_class',
            'Income_class_Counterpart',
            'Source',
            'Income_Source',
            'Cooperation',
            'Defection',
            'Temptation',
            'Partial_Income',
            'Previous_Income_class',
            'Moved',
            ]
            ]

    df = df.groupby(['Simulation','Generation','Income_class', 'Source']).sum().reset_index()

    df_temp = pd.read_parquet(
                                '{}//report_{}.parquet'.format(z[0], z[0]),
                                engine = 'fastparquet',
                                columns = [
                                            'Simulation',
                                            'Generation',
                                            'Player',
                                            'Income_class',
                                            'Income_class_Counterpart',
                                            'Resources',
                                            'Intrinsic',
                                            'Income',
                                            ]
                                )
    df_temp['Generation'] = df_temp.Generation.values + np.ones(len(df_temp.index))

    df_temp['key_Previous_Income_class'] = df_temp.Generation.values - np.ones(len(df_temp.index))
    df_temp['key_Previous_Income_class'] = df_temp['key_Previous_Income_class'].map(str) + df_temp.Player.values
    df_temp2 = df_temp[['Generation', 'Player', 'Income_class']]
    df_temp2 = df_temp2.rename(columns = {'Income_class': 'Previous_Income_class'})
    df_temp2['key_Previous_Income_class'] = df_temp['Generation'].map(str) + df_temp.Player.values
    df_temp2 = df_temp2.drop(['Generation', 'Player'], axis = 1)
    df_temp = df_temp.merge(df_temp2, on = 'key_Previous_Income_class', how = 'left')
    df_temp['Moved'] = (df_temp.Previous_Income_class.values != df_temp.Income_class.values).astype('int')
    del df_temp2
    gc.collect()
    df_temp = df_temp.drop(['key_Previous_Income_class'], axis = 1)
    df_temp = df_temp[(df_temp.Moved.values == 1)]

    df_temp = df_temp.groupby(['Simulation','Generation','Player','Income_class']).mean().reset_index()
    df_temp = df_temp.groupby(['Simulation','Generation','Income_class']).sum().reset_index()

    df = df.merge(
                    df_temp,
                    on = [
                            'Simulation',
                            'Generation',
                            'Income_class',
                            ],
                             how = 'outer',
                             ).sort_values(
                                            by = [
                                                    'Simulation',
                                                    'Generation',
                                                    'Income_class',
                                                    ],
                                                    ascending = True
                                                    )
    del df_temp
    gc.collect()

    df['Source_Share'] = df.Income_Source.values / df.Income.values

    df = df.replace({pd.np.nan: None,
                     0: None})

    df1 = df[df.Income_class.values == 'Top01']
    df2 = df[df.Income_class.values == 'Top10']
    df3 = df[df.Income_class.values == 'Top20']
    df4 = df[df.Income_class.values == 'Top50']
    df5 = df[df.Income_class.values == 'Bottom30']
    df6 = df[df.Income_class.values == 'Bottom']


    # colorscale options
    #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
    #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
    #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
    trace1 = go.Heatmap(
                        z = df1['Source_Share'],
                        x = df1['Generation'],
                        y = df1['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness=15,
                                        tickfont=dict(
                                                        family = 'Times New Roman',
                                                        size = 10,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),

                        )

    trace2 = go.Heatmap(
                        z = df2['Source_Share'],
                        x = df2['Generation'],
                        y = df2['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,
                        )

    trace3 = go.Heatmap(
                        z = df3['Source_Share'],
                        x = df3['Generation'],
                        y = df3['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,
                        )

    trace4 = go.Heatmap(
                        z = df4['Source_Share'],
                        x = df4['Generation'],
                        y = df4['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness=15,
                                        tickfont=dict(
                                                        family = 'Times New Roman',
                                                        size = 10,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),
                        )

    trace5 = go.Heatmap(
                        z = df5['Source_Share'],
                        x = df5['Generation'],
                        y = df5['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,
                        )

    trace6 = go.Heatmap(
                        z = df6['Source_Share'],
                        x = df6['Generation'],
                        y = df6['Source'],
                        colorscale = 'Jet',
                        zmin = 0,
                        zmax = 1,
                        showscale = False,
                        )

    fig1 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['99th', '90th - 98th', '80th - 89th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig1.add_trace(trace1, row = 1, col = 1)
    fig1.add_trace(trace2, row = 2, col = 1)
    fig1.add_trace(trace3, row = 3, col = 1)

    fig1.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig1['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig1,
            #filename = 'Figure{}_{}_{} - UpperBrackets.html'.format(k, title_p, z[0])
            )

    fig2 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['50th - 79th', '20th - 49th', '19th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig2.add_trace(trace4, row = 1, col = 1)
    fig2.add_trace(trace5, row = 2, col = 1)
    fig2.add_trace(trace6, row = 3, col = 1)

    fig2.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig2['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig2,
            #filename = 'Figure{}_{}_{} - LowerBrackets.html'.format(k + 1, title_p, z[0])
            )

source_moved_heat_brackets(13, 0, scenario_a)

def connections_heat_brackets(k, s, z):

    title_p = 'Actual vs Possible Connections'
    title_x = 'Generation'
    title_y = 'Actual vs Possible Connections'

    pd.set_option('display.float_format', lambda x: "{:,.4f}".format(x))

    df = pd.read_parquet(
                            '{}//report_{}.parquet'.format(z[0], z[0]),
                            engine = 'fastparquet',
                            columns = [
                                        'Simulation',
                                        'Generation',
                                        'Player',
                                        'Income_class',
                                        'Income_class_Counterpart',
                                        'Connections',
                                        ]
                            ).sort_values(
                                           by = [
                                                   'Player',
                                                   'Generation',
                                                   'Income_class'
                                                   ],
                                                   ascending = True
                                                   ).groupby(
                                                            [
                                                            'Simulation',
                                                            'Generation',
                                                            'Income_class',
                                                            'Income_class_Counterpart'
                                                            ]
                                                            ).sum().reset_index()

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    df_temp = pd.read_parquet(
                            '{}//report_{}.parquet'.format(z[0], z[0]),
                            engine = 'fastparquet',
                            columns = [
                                        'Simulation',
                                        'Generation',
                                        'Player',
                                        'Income_class',
                                        'Income_class_Counterpart',
                                        ]
                            ).sort_values(
                                           by = [
                                                   'Player',
                                                   'Generation',
                                                   'Income_class'
                                                   ],
                                                   ascending = True
                                                   ).groupby(
                                                            [
                                                            'Simulation',
                                                            'Generation',
                                                            'Income_class',
                                                            'Income_class_Counterpart'
                                                            ]
                                                            ).count().reset_index()
    df_temp['Generation'] = df_temp.Generation.values + np.ones(len(df_temp.index))
    df_temp = df_temp.rename(columns = {'Player': 'Players'})

    df_temp2 = df_temp[df_temp.Income_class.values == df_temp.Income_class_Counterpart.values]

    df_temp2 = df_temp2.rename(
                                columns = {
                                            'Players': 'Players_Counterpart',
                                            #'Income_class': 'Income_class_Counterpart',
                                            }
                                )
    df_temp2 = df_temp2.drop(columns = {'Income_class'})

    df_temp = df_temp.merge(
                            df_temp2,
                            on = [
                                    'Simulation',
                                    'Generation',
                                    'Income_class_Counterpart',
                                    ],
                                     how = 'outer',
                                     ).sort_values(
                                                    by = [
                                                            'Simulation',
                                                            'Generation',
                                                            'Income_class_Counterpart',
                                                            ],
                                                            ascending = True
                                                            )


    del df_temp2
    gc.collect()
    df_temp['Players_Adjust'] = (df_temp.Income_class.values == df_temp.Income_class_Counterpart.values).astype('int')
    df_temp.Players_Counterpart = df_temp.Players_Counterpart.values - df_temp.Players_Adjust.values
    df_temp['Possible_Connections'] = (df_temp.Players_Counterpart.values) * df_temp.Players.values
    df_temp = df_temp.drop(
                            columns = {
                                        'Players',
                                        'Players_Counterpart',
                                        'Players_Adjust',
                                        }
                            )

    df = df.merge(
                    df_temp,
                    on = [
                            'Simulation',
                            'Generation',
                            'Income_class',
                            'Income_class_Counterpart',
                            ],
                             how = 'outer',
                             ).sort_values(
                                            by = [
                                                    'Simulation',
                                                    'Generation',
                                                    'Income_class',
                                                    'Income_class_Counterpart',
                                                    ],
                                                    ascending = True
                                                    )

    del df_temp
    gc.collect()

    df['Connection_Ratio'] = df.Connections.values / df.Possible_Connections.values

    df.Income_class_Counterpart.replace(
                                            {
                                            'Top01': '99th',
                                             'Top10': '90th - 98th',
                                             'Top20': '80th - 89th',
                                             'Top50': '50th - 79th',
                                             'Bottom30': '20th - 49th',
                                             'Bottom': '19th',
                                             },
                                            inplace = True
                                            )

    df.Connection_Ratio.replace({pd.np.nan: None,
                                        0: None,
                                        })
    df = df.sort_values(by=['Income_class_Counterpart'], ascending = False)

    df1 = df[df.Income_class.values == 'Top01']
    df2 = df[df.Income_class.values == 'Top10']
    df3 = df[df.Income_class.values == 'Top20']
    df4 = df[df.Income_class.values == 'Top50']
    df5 = df[df.Income_class.values == 'Bottom30']
    df6 = df[df.Income_class.values == 'Bottom']

    trace1 = go.Heatmap(
                        z = df1['Connection_Ratio'],
                        x = df1['Generation'],
                        y = df1['Income_class_Counterpart'],
                        zmin = 0,
                        zmax = 1,
                        colorscale = 'Portland',
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness=15,
                                        tickfont=dict(
                                                        family = 'Times New Roman',
                                                        size = 10,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),
                        )

    trace2 = go.Heatmap(
                        z = df2['Connection_Ratio'],
                        x = df2['Generation'],
                        y = df2['Income_class_Counterpart'],
                        zmin = 0,
                        zmax = 1,
                        colorscale = 'Portland',
                        showscale = False
                        )

    trace3 = go.Heatmap(
                        z = df3['Connection_Ratio'],
                        x = df3['Generation'],
                        y = df3['Income_class_Counterpart'],
                        zmin = 0,
                        zmax = 1,
                        colorscale = 'Portland',
                        showscale = False
                        )

    trace4 = go.Heatmap(
                        z = df4['Connection_Ratio'],
                        x = df4['Generation'],
                        y = df4['Income_class_Counterpart'],
                        zmin = 0,
                        zmax = 1,
                        colorscale = 'Portland',
                        colorbar = dict(
                                        thicknessmode="pixels",
                                        thickness=15,
                                        tickfont=dict(
                                                        family = 'Times New Roman',
                                                        size = 10,
                                                        color = 'black'
                                                        ),
                                        title = 'Share',
                                        #xanchor = 'right',
                                        titleside = 'top',
                                        titlefont = dict(
                                                        family = 'Times New Roman',
                                                        size = 14,
                                                        color = 'black'
                                                        ),
                                        ),
                        )

    trace5 = go.Heatmap(
                        z = df5['Connection_Ratio'],
                        x = df5['Generation'],
                        y = df5['Income_class_Counterpart'],
                        zmin = 0,
                        zmax = 1,
                        colorscale = 'Portland',
                        showscale = False
                        )

    trace6 = go.Heatmap(
                        z = df6['Connection_Ratio'],
                        x = df6['Generation'],
                        y = df6['Income_class_Counterpart'],
                        zmin = 0,
                        zmax = 1,
                        colorscale = 'Portland',
                        showscale = False
                        )


    fig1 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['99th', '90th - 98th', '80th - 89th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig1.add_trace(trace1, row = 1, col = 1)
    fig1.add_trace(trace2, row = 2, col = 1)
    fig1.add_trace(trace3, row = 3, col = 1)

    fig1.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig1['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig1,
            filename = 'Figure{}_{}_{} - UpperBrackets.html'.format(k, title_p, z[0])
            )

    fig2 = make_subplots(
                        rows = 3,
                        cols = 1,
                        #subplot_titles = ['50th - 79th', '20th - 49th', '19th'],
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig2.add_trace(trace4, row = 1, col = 1)
    fig2.add_trace(trace5, row = 2, col = 1)
    fig2.add_trace(trace6, row = 3, col = 1)

    fig2.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 14,
                                        color = 'black'),
                        showlegend = True,
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 30,
                                        l = 15,
                                        r = 10,
                                        t = 30,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        xaxis3 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig2['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 14,
                        color = 'black',
                        )
        i['yanchor'] = 'bottom'
        i['xanchor'] = 'center'
        i['borderpad'] = 0

    pyo.plot(
            fig2,
            filename = 'Figure{}_{}_{} - LowerBrackets.html'.format(k + 1, title_p, z[0])
            )

connections_heat_brackets(15, 0, scenario_b)

def income_average_brackets(k, s, z):
    title_p = 'Average Income'
    title_x = 'Generation'
    title_y = 'Average Income'

    df = pd.read_parquet(
                        '{}//society_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average',
                                    'Income_Average_Top01',
                                    'Income_Average_Top10',
                                    'Income_Average_Top20',
                                    'Income_Average_Top50',
                                    'Income_Average_Bottom30',
                                    'Income_Average_Bottom',

                                    ]
                        )

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    trace1 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Average_Top01.values,
                        mode = 'lines',
                        name = '1%',
                        line = dict(
                                        color = 'purple',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Average_Top10.values,
                        mode = 'lines',
                        name = '1.01% - 10%',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Average_Top20.values,
                        mode = 'lines',
                        name = '10.01% - 20%',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Average_Top50.values,
                        mode = 'lines',
                        name = '20.01% - 50%',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace5 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Average_Bottom30.values,
                        mode = 'lines',
                        name = '50.01% - 80%',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace6 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Average_Bottom.values,
                        mode = 'lines',
                        name = '80.01% - 100%',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            trace6
            ]

    fig = make_subplots(
                        rows = 6,
                        cols = 1,
                        shared_xaxes = True,
                        vertical_spacing = 0.03,
                        )

    fig.add_trace(trace1, row = 1, col = 1)
    fig.add_trace(trace2, row = 2, col = 1)
    fig.add_trace(trace3, row = 3, col = 1)
    fig.add_trace(trace4, row = 4, col = 1)
    fig.add_trace(trace5, row = 5, col = 1)
    fig.add_trace(trace6, row = 6, col = 1)

    fig.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis3 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis4 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis5 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis6 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis4 = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis5 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis6 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 12,
                        color = 'black')

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_{}.html'.format(k, title_p, z[0])
            )

income_average_brackets(17, 0, scenario_a)

def income_std_brackets(k, s, z):
    title_p = 'Std Income'
    title_x = 'Generation'
    title_y = 'Std Income'

    df = pd.read_parquet(
                        '{}//society_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Std',
                                    'Income_Std_Top01',
                                    'Income_Std_Top10',
                                    'Income_Std_Top20',
                                    'Income_Std_Top50',
                                    'Income_Std_Bottom30',
                                    'Income_Std_Bottom',

                                    ]
                        )

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    trace1 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Std_Top01.values,
                        mode = 'lines',
                        name = '1%',
                        line = dict(
                                        color = 'purple',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Std_Top10.values,
                        mode = 'lines',
                        name = '1.01% - 10%',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Std_Top20.values,
                        mode = 'lines',
                        name = '10.01% - 20%',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Std_Top50.values,
                        mode = 'lines',
                        name = '20.01% - 50%',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace5 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Std_Bottom30.values,
                        mode = 'lines',
                        name = '50.01% - 80%',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace6 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Income_Std_Bottom.values,
                        mode = 'lines',
                        name = '80.01% - 100%',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            trace6
            ]

    fig = make_subplots(
                        rows = 6,
                        cols = 1,
                        shared_xaxes = True,
                        vertical_spacing = 0.03,
                        )

    fig.add_trace(trace1, row = 1, col = 1)
    fig.add_trace(trace2, row = 2, col = 1)
    fig.add_trace(trace3, row = 3, col = 1)
    fig.add_trace(trace4, row = 4, col = 1)
    fig.add_trace(trace5, row = 5, col = 1)
    fig.add_trace(trace6, row = 6, col = 1)

    fig.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis3 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis4 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis5 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis6 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis4 = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis5 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis6 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 12,
                        color = 'black')

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_{}.html'.format(k, title_p, z[0])
            )

income_std_brackets(18, 0, scenario_a)

def wealth_average_brackets(k, s, z):

    title_p = 'Average Wealth'
    title_x = 'Generation'
    title_y = 'Average Wealth'

    df = pd.read_parquet(
                        '{}//society_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average',
                                    'Wealth_Average_Top01',
                                    'Wealth_Average_Top10',
                                    'Wealth_Average_Top20',
                                    'Wealth_Average_Top50',
                                    'Wealth_Average_Bottom30',
                                    'Wealth_Average_Bottom',

                                    ]
                        )

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    trace1 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Average_Top01.values,
                        mode = 'lines',
                        name = '1%',
                        line = dict(
                                        color = 'purple',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Average_Top10.values,
                        mode = 'lines',
                        name = '1.01% - 10%',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Average_Top20.values,
                        mode = 'lines',
                        name = '10.01% - 20%',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Average_Top50.values,
                        mode = 'lines',
                        name = '20.01% - 50%',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace5 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Average_Bottom30.values,
                        mode = 'lines',
                        name = '50.01% - 80%',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace6 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Average_Bottom.values,
                        mode = 'lines',
                        name = '80.01% - 100%',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            trace6
            ]

    fig = make_subplots(
                        rows = 6,
                        cols = 1,
                        shared_xaxes = True,
                        vertical_spacing = 0.03,
                        )

    fig.add_trace(trace1, row = 1, col = 1)
    fig.add_trace(trace2, row = 2, col = 1)
    fig.add_trace(trace3, row = 3, col = 1)
    fig.add_trace(trace4, row = 4, col = 1)
    fig.add_trace(trace5, row = 5, col = 1)
    fig.add_trace(trace6, row = 6, col = 1)

    fig.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis3 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis4 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis5 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis6 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis4 = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis5 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis6 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 12,
                        color = 'black')

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_{}.html'.format(k, title_p, z[0])
            )

wealth_average_brackets(19, 0, scenario_a)

def wealth_std_brackets(k, s, z):

    title_p = 'Std Wealth'
    title_x = 'Generation'
    title_y = 'Std Wealth'

    df = pd.read_parquet(
                        '{}//society_{}.parquet'.format(z[0], z[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Std',
                                    'Wealth_Std_Top01',
                                    'Wealth_Std_Top10',
                                    'Wealth_Std_Top20',
                                    'Wealth_Std_Top50',
                                    'Wealth_Std_Bottom30',
                                    'Wealth_Std_Bottom',

                                    ]
                        )

    df = df[df.Simulation.values == s]

    df['Generation'] = df.Generation.values + np.ones(len(df.index))

    trace1 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Std_Top01.values,
                        mode = 'lines',
                        name = '1%',
                        line = dict(
                                        color = 'purple',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Std_Top10.values,
                        mode = 'lines',
                        name = '1.01% - 10%',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Std_Top20.values,
                        mode = 'lines',
                        name = '10.01% - 20%',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Std_Top50.values,
                        mode = 'lines',
                        name = '20.01% - 50%',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace5 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Std_Bottom30.values,
                        mode = 'lines',
                        name = '50.01% - 80%',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace6 = go.Scatter(
                        x = df.Generation.values,
                        y = df.Wealth_Std_Bottom.values,
                        mode = 'lines',
                        name = '80.01% - 100%',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            trace6
            ]

    fig = make_subplots(
                        rows = 6,
                        cols = 1,
                        shared_xaxes = True,
                        vertical_spacing = 0.03,
                        )

    fig.add_trace(trace1, row = 1, col = 1)
    fig.add_trace(trace2, row = 2, col = 1)
    fig.add_trace(trace3, row = 3, col = 1)
    fig.add_trace(trace4, row = 4, col = 1)
    fig.add_trace(trace5, row = 5, col = 1)
    fig.add_trace(trace6, row = 6, col = 1)

    fig.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis3 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis4 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis5 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis6 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = '99th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = '90th - 98th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = '80th - 89th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis4 = dict(
                                    title = '50th - 79th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis5 = dict(
                                    title = '20th - 49th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis6 = dict(
                                    title = '19th',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 16,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 12,
                        color = 'black')

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_{}.html'.format(k, title_p, z[0])
            )

wealth_std_brackets(20, 0, scenario_a)

def gini_scenarios(k, s):

    title_p = 'Gini Index'
    title_x = 'Generation'
    title_y = 'Gini Index'

    dfa = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_a[0], scenario_a[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini'
                                    ]
                        )
    dfa = dfa[dfa.Simulation.values == s]

    dfa['Generation'] = dfa.Generation.values + np.ones(len(dfa.index))

    dfb = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_b[0], scenario_b[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini'
                                    ]
                        )
    dfb = dfb[dfb.Simulation.values == s]

    dfb['Generation'] = dfb.Generation.values + np.ones(len(dfb.index))

    dfc = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_c[0], scenario_c[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini'
                                    ]
                        )
    dfc = dfc[dfc.Simulation.values == s]

    dfc['Generation'] = dfc.Generation.values + np.ones(len(dfc.index))

    dfd = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_d[0], scenario_d[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini'
                                    ]
                        )
    dfd = dfd[dfd.Simulation.values == s]

    dfd['Generation'] = dfd.Generation.values + np.ones(len(dfd.index))

    dfe = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_e[0], scenario_e[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini'
                                    ]
                        )
    dfe = dfe[dfe.Simulation.values == s]

    dfe['Generation'] = dfe.Generation.values + np.ones(len(dfe.index))

    dff = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_f[0], scenario_f[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Gini'
                                    ]
                        )
    dff = dff[dff.Simulation.values == s]

    dff['Generation'] = dff.Generation.values + np.ones(len(dff.index))

    trace0 = go.Scatter(
                        x = dfa[dfa.Simulation.values == 0].Generation.values,
                        y = dfa[dfa.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'Scenario A',
                        line = dict(
                                        color = 'purple',
                                        width = 3,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace1 = go.Scatter(
                        x = dfb[dfa.Simulation.values == 0].Generation.values,
                        y = dfb[dfb.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'Scenario B',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = dfc[dfc.Simulation.values == 0].Generation.values,
                        y = dfc[dfc.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'Scenario C',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = dfd[dfd.Simulation.values == 0].Generation.values,
                        y = dfd[dfd.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'Scenario D',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = dfe[dfe.Simulation.values == 0].Generation.values,
                        y = dfe[dfe.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )


    trace5 = go.Scatter(
                        x = dff[dff.Simulation.values == 0].Generation.values,
                        y = dff[dff.Simulation.values == 0].Gini.values,
                        mode = 'lines',
                        name = 'Scenario F',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace0,
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            ]

    layout = go.Layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = True,
                        legend = dict(
                                        font = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'
                                            )
                                        ),
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    title = '{}'.format(title_x),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = True,
                                    showgrid = True,
                                    zeroline = False,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    gridcolor = 'lightgray',

                                    ),

                        yaxis = dict(
                                    title = '{}'.format(title_y),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    showticklabels = True
                                    )

                        )
    fig = go.Figure(
                    data = data,
                    layout = layout
                    )

    pyo.plot(
            fig,
            filename = 'Figure{}_GiniScenarios.html'.format(k, )
            )

gini_scenarios(21, 0)

def incomeShareTop10_scenarios(k, s):

    title_p = 'Income Share'
    title_x = 'Generation'
    title_y = 'Gini Index'

    dfa = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_a[0], scenario_a[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    ]
                        )
    dfa = dfa[dfa.Simulation.values == s]

    dfa['Generation'] = dfa.Generation.values + np.ones(len(dfa.index))

    dfb = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_b[0], scenario_b[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    ]
                        )
    dfb = dfb[dfb.Simulation.values == s]

    dfb['Generation'] = dfb.Generation.values + np.ones(len(dfb.index))

    dfc = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_c[0], scenario_c[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    ]
                        )
    dfc = dfc[dfc.Simulation.values == s]

    dfc['Generation'] = dfc.Generation.values + np.ones(len(dfc.index))

    dfd = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_d[0], scenario_d[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    ]
                        )
    dfd = dfd[dfd.Simulation.values == s]

    dfd['Generation'] = dfd.Generation.values + np.ones(len(dfd.index))

    dfe = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_e[0], scenario_e[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    ]
                        )
    dfe = dfe[dfe.Simulation.values == s]

    dfe['Generation'] = dfe.Generation.values + np.ones(len(dfe.index))

    dff = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_f[0], scenario_f[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Top01',
                                    'Income_Top10',
                                    ]
                        )
    dff = dff[dff.Simulation.values == s]

    dff['Generation'] = dff.Generation.values + np.ones(len(dff.index))

    trace0 = go.Scatter(
                        x = dfa[dfa.Simulation.values == 0].Generation.values,
                        y = (
                            dfa[dfa.Simulation.values == 0].Income_Top01.values
                            +
                            dfa[dfa.Simulation.values == 0].Income_Top10.values
                            )
                            / dfa[dfa.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario A',
                        line = dict(
                                        color = 'purple',
                                        width = 3,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace1 = go.Scatter(
                        x = dfb[dfa.Simulation.values == 0].Generation.values,
                        y = (
                            dfb[dfb.Simulation.values == 0].Income_Top01.values
                            +
                            dfb[dfb.Simulation.values == 0].Income_Top10.values
                            )
                            / dfb[dfb.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario B',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = dfc[dfc.Simulation.values == 0].Generation.values,
                        y = (
                            dfc[dfc.Simulation.values == 0].Income_Top01.values
                            +
                            dfc[dfc.Simulation.values == 0].Income_Top10.values
                            )
                            / dfc[dfc.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario C',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = dfd[dfd.Simulation.values == 0].Generation.values,
                        y = (
                            dfd[dfd.Simulation.values == 0].Income_Top01.values
                            +
                            dfd[dfd.Simulation.values == 0].Income_Top10.values
                            )
                            / dfd[dfd.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario D',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = dff[dff.Simulation.values == 0].Generation.values,
                        y = (
                            dfe[dfe.Simulation.values == 0].Income_Top01.values
                            +
                            dfe[dfe.Simulation.values == 0].Income_Top10.values
                            )
                            / dfe[dfe.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )


    trace5 = go.Scatter(
                        x = dfe[dfe.Simulation.values == 0].Generation.values,
                        y = (
                            dff[dff.Simulation.values == 0].Income_Top01.values
                            +
                            dff[dff.Simulation.values == 0].Income_Top10.values
                            )
                            / dff[dff.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario F',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace0,
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            ]

    layout = go.Layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = True,
                        legend = dict(
                                        font = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'
                                            )
                                        ),
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    title = '{}'.format(title_x),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = True,
                                    showgrid = True,
                                    zeroline = False,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    gridcolor = 'lightgray',

                                    ),

                        yaxis = dict(
                                    title = '{}'.format(title_y),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    showticklabels = True
                                    )

                        )
    fig = go.Figure(
                    data = data,
                    layout = layout
                    )

    pyo.plot(
            fig,
            filename = 'Figure{}_ShareTop10Scenarios.html'.format(k, )
            )

incomeShareTop10_scenarios(22, 0)

def incomeShareBottom50_scenarios(k, s):

    title_p = 'Income Share'
    title_x = 'Generation'
    title_y = 'Gini Index'

    dfa = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_a[0], scenario_a[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Bottom',
                                    'Income_Bottom30',
                                    ]
                        )
    dfa = dfa[dfa.Simulation.values == s]

    dfa['Generation'] = dfa.Generation.values + np.ones(len(dfa.index))

    dfb = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_b[0], scenario_b[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Bottom',
                                    'Income_Bottom30',
                                    ]
                        )
    dfb = dfb[dfb.Simulation.values == s]

    dfb['Generation'] = dfb.Generation.values + np.ones(len(dfb.index))

    dfc = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_c[0], scenario_c[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Bottom',
                                    'Income_Bottom30',
                                    ]
                        )
    dfc = dfc[dfc.Simulation.values == s]

    dfc['Generation'] = dfc.Generation.values + np.ones(len(dfc.index))

    dfd = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_d[0], scenario_d[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Bottom',
                                    'Income_Bottom30',
                                    ]
                        )
    dfd = dfd[dfd.Simulation.values == s]

    dfd['Generation'] = dfd.Generation.values + np.ones(len(dfd.index))

    dfe = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_e[0], scenario_e[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Bottom',
                                    'Income_Bottom30',
                                    ]
                        )
    dfe = dfe[dfe.Simulation.values == s]

    dfe['Generation'] = dfe.Generation.values + np.ones(len(dfe.index))

    dff = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_f[0], scenario_f[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income',
                                    'Income_Bottom',
                                    'Income_Bottom30',
                                    ]
                        )
    dff = dff[dff.Simulation.values == s]

    dff['Generation'] = dff.Generation.values + np.ones(len(dff.index))

    trace0 = go.Scatter(
                        x = dfa[dfa.Simulation.values == 0].Generation.values,
                        y = (
                            dfa[dfa.Simulation.values == 0].Income_Bottom.values
                            +
                            dfa[dfa.Simulation.values == 0].Income_Bottom30.values
                            )
                            / dfa[dfa.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario A',
                        line = dict(
                                        color = 'purple',
                                        width = 3,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace1 = go.Scatter(
                        x = dfb[dfa.Simulation.values == 0].Generation.values,
                        y = (
                            dfb[dfb.Simulation.values == 0].Income_Bottom.values
                            +
                            dfb[dfb.Simulation.values == 0].Income_Bottom30.values
                            )
                            / dfb[dfb.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario B',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = dfc[dfc.Simulation.values == 0].Generation.values,
                        y = (
                            dfc[dfc.Simulation.values == 0].Income_Bottom.values
                            +
                            dfc[dfc.Simulation.values == 0].Income_Bottom30.values
                            )
                            / dfc[dfc.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario C',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = dfd[dfd.Simulation.values == 0].Generation.values,
                        y = (
                            dfd[dfd.Simulation.values == 0].Income_Bottom.values
                            +
                            dfd[dfd.Simulation.values == 0].Income_Bottom30.values
                            )
                            / dfd[dfd.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario D',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = dff[dff.Simulation.values == 0].Generation.values,
                        y = (
                            dfe[dfe.Simulation.values == 0].Income_Bottom.values
                            +
                            dfe[dfe.Simulation.values == 0].Income_Bottom30.values
                            )
                            / dfe[dfe.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )


    trace5 = go.Scatter(
                        x = dfe[dfe.Simulation.values == 0].Generation.values,
                        y = (
                            dff[dff.Simulation.values == 0].Income_Bottom.values
                            +
                            dff[dff.Simulation.values == 0].Income_Bottom30.values
                            )
                            / dff[dff.Simulation.values == 0].Income.values,
                        mode = 'lines',
                        name = 'Scenario F',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace0,
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            ]

    layout = go.Layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = True,
                        legend = dict(
                                        font = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'
                                            )
                                        ),
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 0,
                                        ),

                        xaxis = dict(
                                    title = '{}'.format(title_x),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = True,
                                    showgrid = True,
                                    zeroline = False,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    gridcolor = 'lightgray',

                                    ),

                        yaxis = dict(
                                    title = '{}'.format(title_y),
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    color = 'black',
                                    linecolor = 'black',
                                    showticklabels = True
                                    )

                        )
    fig = go.Figure(
                    data = data,
                    layout = layout
                    )

    pyo.plot(
            fig,
            filename = 'Figure{}_ShareBottom30Scenarios.html'.format(k, )
            )

incomeShareBottom50_scenarios(23, 0)

def incomeAverage_scenarios(k, s):

    title_p = 'Average Income'
    title_x = 'Generation'
    title_y = 'Income_Average'

    dfa = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_a[0], scenario_a[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average'
                                    ]
                        )
    dfa = dfa[dfa.Simulation.values == s]

    dfa['Generation'] = dfa.Generation.values + np.ones(len(dfa.index))

    dfb = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_b[0], scenario_b[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average'
                                    ]
                        )
    dfb = dfb[dfb.Simulation.values == s]

    dfb['Generation'] = dfb.Generation.values + np.ones(len(dfb.index))

    dfc = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_c[0], scenario_c[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average'
                                    ]
                        )
    dfc = dfc[dfc.Simulation.values == s]

    dfc['Generation'] = dfc.Generation.values + np.ones(len(dfc.index))

    dfd = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_d[0], scenario_d[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average'
                                    ]
                        )
    dfd = dfd[dfd.Simulation.values == s]

    dfd['Generation'] = dfd.Generation.values + np.ones(len(dfd.index))

    dfe = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_e[0], scenario_e[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average'
                                    ]
                        )
    dfe = dfe[dfe.Simulation.values == s]

    dfe['Generation'] = dfe.Generation.values + np.ones(len(dfe.index))

    dff = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_f[0], scenario_f[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Income_Average'
                                    ]
                        )
    dff = dff[dff.Simulation.values == s]

    dff['Generation'] = dff.Generation.values + np.ones(len(dff.index))

    trace0 = go.Scatter(
                        x = dfa[dfa.Simulation.values == 0].Generation.values,
                        y = dfa[dfa.Simulation.values == 0].Income_Average.values,
                        mode = 'lines',
                        name = 'Scenario A',
                        line = dict(
                                        color = 'purple',
                                        width = 3,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace1 = go.Scatter(
                        x = dfb[dfa.Simulation.values == 0].Generation.values,
                        y = dfb[dfb.Simulation.values == 0].Income_Average.values,
                        mode = 'lines',
                        name = 'Scenario B',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = dfc[dfc.Simulation.values == 0].Generation.values,
                        y = dfc[dfc.Simulation.values == 0].Income_Average.values,
                        mode = 'lines',
                        name = 'Scenario C',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = dfd[dfd.Simulation.values == 0].Generation.values,
                        y = dfd[dfd.Simulation.values == 0].Income_Average.values,
                        mode = 'lines',
                        name = 'Scenario D',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = dfe[dfe.Simulation.values == 0].Generation.values,
                        y = dfe[dfe.Simulation.values == 0].Income_Average.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )


    trace5 = go.Scatter(
                        x = dff[dff.Simulation.values == 0].Generation.values,
                        y = dff[dff.Simulation.values == 0].Income_Average.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace0,
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            ]


    fig = make_subplots(
                        rows = 6,
                        cols = 1,
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig.add_trace(trace0, row = 1, col = 1)
    fig.add_trace(trace1, row = 2, col = 1)
    fig.add_trace(trace2, row = 3, col = 1)
    fig.add_trace(trace3, row = 4, col = 1)
    fig.add_trace(trace4, row = 5, col = 1)
    fig.add_trace(trace5, row = 6, col = 1)

    fig.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 5,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis3 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis4 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis5 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis6 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = 'Scenario A',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = 'Scenario B',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = 'Scenari C',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis4 = dict(
                                    title = 'Scenario D',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis5 = dict(
                                    title = 'Scenario E',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis6 = dict(
                                    title = 'Scenario F',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 12,
                        color = 'black')

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_Scenarios.html'.format(k, title_p,)
            )

incomeAverage_scenarios(21, 0)

def wealthAverage_scenarios(k, s):

    title_p = 'Average Wealth'
    title_x = 'Generation'
    title_y = 'Wealth_Average'

    dfa = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_a[0], scenario_a[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average'
                                    ]
                        )
    dfa = dfa[dfa.Simulation.values == s]

    dfa['Generation'] = dfa.Generation.values + np.ones(len(dfa.index))

    dfb = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_b[0], scenario_b[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average'
                                    ]
                        )
    dfb = dfb[dfb.Simulation.values == s]

    dfb['Generation'] = dfb.Generation.values + np.ones(len(dfb.index))

    dfc = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_c[0], scenario_c[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average'
                                    ]
                        )
    dfc = dfc[dfc.Simulation.values == s]

    dfc['Generation'] = dfc.Generation.values + np.ones(len(dfc.index))

    dfd = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_d[0], scenario_d[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average'
                                    ]
                        )
    dfd = dfd[dfd.Simulation.values == s]

    dfd['Generation'] = dfd.Generation.values + np.ones(len(dfd.index))

    dfe = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_e[0], scenario_e[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average'
                                    ]
                        )
    dfe = dfe[dfe.Simulation.values == s]

    dfe['Generation'] = dfe.Generation.values + np.ones(len(dfe.index))

    dff = pd.read_parquet(
                        '{}//society_{}.parquet'.format(scenario_f[0], scenario_f[0]),
                        engine = 'fastparquet',
                        columns = [
                                    'Generation',
                                    'Simulation',
                                    'Wealth_Average'
                                    ]
                        )
    dff = dff[dff.Simulation.values == s]

    dff['Generation'] = dff.Generation.values + np.ones(len(dff.index))

    trace0 = go.Scatter(
                        x = dfa[dfa.Simulation.values == 0].Generation.values,
                        y = dfa[dfa.Simulation.values == 0].Wealth_Average.values,
                        mode = 'lines',
                        name = 'Scenario A',
                        line = dict(
                                        color = 'purple',
                                        width = 3,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace1 = go.Scatter(
                        x = dfb[dfa.Simulation.values == 0].Generation.values,
                        y = dfb[dfb.Simulation.values == 0].Wealth_Average.values,
                        mode = 'lines',
                        name = 'Scenario B',
                        line = dict(
                                        color = 'darkblue',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace2 = go.Scatter(
                        x = dfc[dfc.Simulation.values == 0].Generation.values,
                        y = dfc[dfc.Simulation.values == 0].Wealth_Average.values,
                        mode = 'lines',
                        name = 'Scenario C',
                        line = dict(
                                        color = 'darkgreen',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace3 = go.Scatter(
                        x = dfd[dfd.Simulation.values == 0].Generation.values,
                        y = dfd[dfd.Simulation.values == 0].Wealth_Average.values,
                        mode = 'lines',
                        name = 'Scenario D',
                        line = dict(
                                        color = 'yellow',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )

    trace4 = go.Scatter(
                        x = dfe[dfe.Simulation.values == 0].Generation.values,
                        y = dfe[dfe.Simulation.values == 0].Wealth_Average.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'orangered',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )


    trace5 = go.Scatter(
                        x = dff[dff.Simulation.values == 0].Generation.values,
                        y = dff[dff.Simulation.values == 0].Wealth_Average.values,
                        mode = 'lines',
                        name = 'Scenario E',
                        line = dict(
                                        color = 'red',
                                        width = 2.5,
                                        ),
                        hovertemplate = '<br><i>%{x}'': <i>%{y:.4f}',
                        )
    data = [
            trace0,
            trace1,
            trace2,
            trace3,
            trace4,
            trace5,
            ]


    fig = make_subplots(
                        rows = 6,
                        cols = 1,
                        shared_xaxes = True,
                        vertical_spacing = 0.04,
                        )

    fig.add_trace(trace0, row = 1, col = 1)
    fig.add_trace(trace1, row = 2, col = 1)
    fig.add_trace(trace2, row = 3, col = 1)
    fig.add_trace(trace3, row = 4, col = 1)
    fig.add_trace(trace4, row = 5, col = 1)
    fig.add_trace(trace5, row = 6, col = 1)

    fig.update_layout(
                        #title = '<br><b>Figure {}: {} (Scenario {})<br><b>'.format(k, title_p, z[1]),
                        titlefont = dict(
                                        family = 'Times New Roman',
                                        size = 20,
                                        color = 'black'),
                        showlegend = False,
                        legend_orientation = 'h',
                        hovermode = 'closest',
                        paper_bgcolor = 'rgba(0,0,0,0)',
                        plot_bgcolor = 'rgba(0,0,0,0)',
                        margin = dict(
                                        b = 20,
                                        l = 0,
                                        r = 0,
                                        t = 5,
                                        ),

                        xaxis = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis2 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis3 = dict(
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis4 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis5 = dict(

                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    showticklabels = False,
                                    showgrid = False,
                                    zeroline = True,
                                    linecolor = 'lightgray',
                                    showline = True,
                                    ),

                        xaxis6 = dict(
                                    title = 'Generation',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showticklabels = True,
                                    showgrid = False,
                                    zeroline = False,
                                    showline = False,
                                    ),

                        yaxis = dict(
                                    title = 'Scenario A',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis2 = dict(
                                    title = 'Scenario B',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis3 = dict(
                                    title = 'Scenari C',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis4 = dict(
                                    title = 'Scenario D',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis5 = dict(
                                    title = 'Scenario E',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        yaxis6 = dict(
                                    title = 'Scenario F',
                                    titlefont = dict(
                                                    family = 'Times New Roman',
                                                    size = 14,
                                                    color = 'black'),
                                    tickfont = dict(
                                                    family = 'Times New Roman',
                                                    size = 12,
                                                    color = 'black'),
                                    tickcolor = 'black',
                                    showgrid = False,
                                    zeroline = True,
                                    showline = True,
                                    showticklabels = True
                                    ),

                        )

    for i in fig['layout']['annotations']:
        i['font'] = dict(
                        family = 'Times New Roman',
                        size = 12,
                        color = 'black')

    pyo.plot(
            fig,
            filename = 'Figure{}_{}_Scenarios.html'.format(k, title_p,)
            )

wealthAverage_scenarios(213, 0)
